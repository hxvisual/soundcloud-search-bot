import os
import logging
import tempfile
import time
import html
import re
import subprocess
import shutil
from aiogram import types, Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import FSInputFile, InputMediaAudio, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

from api.soundcloud_api import SoundCloudClient
from api.spotify_api import SpotifyClient
from api.youtube_api import YouTubeClient
from utils.logger import setup_logger

logger = setup_logger(__name__, log_to_file=False)

router = Router()

sc_client = SoundCloudClient()
spotify_client = SpotifyClient()
youtube_client = YouTubeClient()

class SearchStates(StatesGroup):
    waiting_for_query = State()
    select_platform = State()
    select_track = State()

TRACKS_PER_PAGE = 5
MAX_CAPTION_LENGTH = 1024

def escape_html(text):
    if not text:
        return ""
    return html.escape(str(text))

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    music_emoji = "üéµ"
    sound_emoji = "üü†"
    spotify_emoji = "üü¢"
    download_emoji = "‚¨áÔ∏è"
    search_emoji = "üîç"
    star_emoji = "‚≠ê"
    info_emoji = "‚ÑπÔ∏è"
    support_emoji = "üë®‚Äçüíª"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º)
    builder.row(
        types.InlineKeyboardButton(
            text=f"{support_emoji} –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", 
            url="https://t.me/crypthx"
        )
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    welcome_text = f"""
<b>{music_emoji} HX MUSIC BOT {music_emoji}</b>

{star_emoji} <b>–ü–æ–∏—Å–∫ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º—É–∑—ã–∫–∏ —Å —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º</b> {star_emoji}

–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏ —Å–∫–∞—á–∞—Ç—å —Ç–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏ c {sound_emoji} <b>SoundCloud</b> –∏ {spotify_emoji} <b>Spotify</b>.

<b>{info_emoji} –ö–ê–ö –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø:</b>

<b>1.</b> –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
<b>2.</b> –í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (SoundCloud –∏–ª–∏ Spotify)
<b>3.</b> –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–∫ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
<b>4.</b> –ü–æ–ª—É—á–∏ —Ç—Ä–µ–∫ –ø—Ä—è–º–æ –≤ Telegram!

<b>{star_emoji} –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:</b>

{download_emoji} –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ (320 kbps)
{download_emoji} –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–ª–æ–∂–µ–∫ —Ç—Ä–µ–∫–æ–≤
{download_emoji} –£–¥–æ–±–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫

<b>{support_emoji} –ü–û–î–î–ï–†–ñ–ö–ê:</b>

–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å - –æ–±—Ä–∞—â–∞–π—Å—è –∫ @crypthx

<i>–ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞!</i>
"""
    
    await message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

async def show_help_message(message: types.Message):
    await message.answer(
        "üéµ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "‚Ä¢ /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n"
        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∏ —è –Ω–∞–π–¥—É –µ–≥–æ –¥–ª—è –≤–∞—Å.\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (SoundCloud –∏–ª–∏ Spotify).\n"
        "‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É —Å –Ω–æ–º–µ—Ä–æ–º.\n"
        "‚Ä¢ –û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞ - —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞.\n\n"
        "‚ö†Ô∏è <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –î–ª—è —Ç—Ä–µ–∫–æ–≤ —Å–æ Spotify –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ YouTube.",
        parse_mode="HTML"
    )

@router.message(Command("search"))
async def cmd_search(message: types.Message, command: CommandObject, state: FSMContext):
    if command.args:
        # Show search message with platform options in the same message
        search_msg = await message.answer(f"üîç –ü–æ–∏—Å–∫: <b>{escape_html(command.args)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", 
                                          parse_mode="HTML",
                                          reply_markup=get_platform_selection_keyboard())
        
        # Store data for future use
        await state.update_data(
            query=command.args,
            search_message_id=search_msg.message_id
        )
        await state.set_state(SearchStates.select_platform)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:")
        await state.set_state(SearchStates.waiting_for_query)

@router.message(SearchStates.waiting_for_query)
async def process_search_query(message: types.Message, state: FSMContext):
    query = message.text.strip()
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
        
    # Show search message with platform options in the same message
    search_msg = await message.answer(f"üîç –ü–æ–∏—Å–∫: <b>{escape_html(query)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", 
                                     parse_mode="HTML",
                                     reply_markup=get_platform_selection_keyboard())
    
    # Store data for future use
    await state.update_data(
        query=query,
        search_message_id=search_msg.message_id
    )
    await state.set_state(SearchStates.select_platform)

def get_platform_selection_keyboard():
    """Create platform selection keyboard with colored emoji"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üü† SoundCloud", callback_data="platform_soundcloud"),
        types.InlineKeyboardButton(text="üü¢ Spotify", callback_data="platform_spotify")
    )
    return builder.as_markup()

@router.callback_query(SearchStates.select_platform, F.data.startswith("platform_"))
async def process_platform_selection(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    platform = callback_query.data.split("_")[1]
    data = await state.get_data()
    query = data.get("query", "")
    
    # Show loading in the same message
    platform_name = "SoundCloud" if platform == "soundcloud" else "Spotify"
    platform_emoji = "üü†" if platform == "soundcloud" else "üü¢"
    
    await callback_query.message.edit_text(
        f"üîç –ò—â—É –Ω–∞ {platform_emoji} {platform_name}: <b>{escape_html(query)}</b>...",
        parse_mode="HTML"
    )
    
    # Search based on selected platform
    tracks = []
    if platform == "soundcloud":
        tracks = sc_client.search_tracks(query, limit=20)
    elif platform == "spotify":
        tracks = spotify_client.search_tracks(query, limit=20)
    
    if not tracks:
        # Show no results but keep platform selection buttons
        builder = InlineKeyboardBuilder()
        builder.row(
            types.InlineKeyboardButton(text="üü† SoundCloud", callback_data="platform_soundcloud"),
            types.InlineKeyboardButton(text="üü¢ Spotify", callback_data="platform_spotify")
        )
        
        await callback_query.message.edit_text(
            f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {platform_emoji} {platform_name} –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{escape_html(query)}</b>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        return
    
    await state.update_data(tracks=tracks, current_page=0, platform=platform)
    
    # Show results in the same message
    await show_tracks_page(callback_query.message, state)

async def show_tracks_page(message: types.Message, state: FSMContext):
    data = await state.get_data()
    tracks = data.get("tracks", [])
    current_page = data.get("current_page", 0)
    platform = data.get("platform", "soundcloud")
    total_tracks = len(tracks)
    
    start_idx = current_page * TRACKS_PER_PAGE
    end_idx = min(start_idx + TRACKS_PER_PAGE, total_tracks)
    current_tracks = tracks[start_idx:end_idx]
    
    track_list = []
    
    for i, track in enumerate(current_tracks):
        # Handle duration formatting differently for each platform
        if platform == "spotify":
            # Spotify uses milliseconds
            duration_ms = int(track.get("duration", 0))
            duration_sec = duration_ms // 1000
        else:
            # SoundCloud uses milliseconds too
            duration_sec = int(track.get("duration", 0) / 1000)
            
        duration_min = duration_sec // 60
        duration_sec = duration_sec % 60
        
        user_info = track.get('user', '')
        username = ''
        
        if isinstance(user_info, dict):
            username = user_info.get('username', 'Unknown')
        else:
            username = str(user_info)
        
        title = track.get('title', 'Untitled')
        
        safe_username = escape_html(username)
        safe_title = escape_html(title)
        
        # Removed platform emoji from individual tracks
        track_list.append(
            f"{start_idx + i + 1}. <b>{safe_username}</b> - {safe_title} ({duration_min}:{duration_sec:02d})"
        )
    
    builder = InlineKeyboardBuilder()
    
    number_buttons = []
    for i in range(len(current_tracks)):
        number_buttons.append(types.InlineKeyboardButton(
            text=f"{start_idx + i + 1}",
            callback_data=f"track_{start_idx + i}"
        ))
    
    builder.row(*number_buttons)
    
    pagination_buttons = []
    
    if current_page > 0:
        pagination_buttons.append(types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="page_prev"
        ))
    
    total_pages = (total_tracks + TRACKS_PER_PAGE - 1) // TRACKS_PER_PAGE
    pagination_buttons.append(types.InlineKeyboardButton(
        text=f"–°—Ç—Ä. {current_page + 1}/{total_pages}",
        callback_data="page_info"
    ))
    
    if end_idx < total_tracks:
        pagination_buttons.append(types.InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
            callback_data="page_next"
        ))
    
    builder.row(*pagination_buttons)
    
    # Add button to switch directly to the alternative platform
    alt_platform = "spotify" if platform == "soundcloud" else "soundcloud"
    alt_platform_name = "Spotify" if alt_platform == "spotify" else "SoundCloud"
    builder.row(types.InlineKeyboardButton(
        text=f"–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞ {alt_platform_name}",
        callback_data=f"direct_change_{alt_platform}"
    ))
    
    query = data.get("query", "")
    safe_query = escape_html(query)
    
    # Add platform emoji to the platform name in the header
    platform_emoji = "üü†" if platform == "soundcloud" else "üü¢"
    platform_name = "SoundCloud" if platform == "soundcloud" else "Spotify"
    
    text = f"üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–∞ {platform_emoji} {platform_name}: <b>{safe_query}</b>\n" \
           f"–ü–æ–∫–∞–∑–∞–Ω—ã —Ç—Ä–µ–∫–∏ {start_idx + 1}-{end_idx} –∏–∑ {total_tracks}\n\n" \
           f"{'\n'.join(track_list)}"
    
    try:
        await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except TelegramBadRequest as e:
        logger.error(f"Error editing message: {e}")
        new_message = await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
        await state.update_data(search_message_id=new_message.message_id)
    
    await state.set_state(SearchStates.select_track)

@router.callback_query(F.data.startswith("direct_change_"))
async def direct_change_platform(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    new_platform = callback_query.data.split("_")[2]
    data = await state.get_data()
    query = data.get("query", "")
    
    # Show loading message
    platform_name = "SoundCloud" if new_platform == "soundcloud" else "Spotify"
    platform_emoji = "üü†" if new_platform == "soundcloud" else "üü¢"
    
    await callback_query.message.edit_text(
        f"üîç –ò—â—É –Ω–∞ {platform_emoji} {platform_name}: <b>{escape_html(query)}</b>...",
        parse_mode="HTML"
    )
    
    # Search on the new platform
    tracks = []
    if new_platform == "soundcloud":
        tracks = sc_client.search_tracks(query, limit=20)
    elif new_platform == "spotify":
        tracks = spotify_client.search_tracks(query, limit=20)
    
    if not tracks:
        # Show platform selection buttons again
        builder = InlineKeyboardBuilder()
        alt_platform = "spotify" if new_platform == "soundcloud" else "soundcloud"
        alt_platform_name = "Spotify" if alt_platform == "spotify" else "SoundCloud"
        
        builder.row(
            types.InlineKeyboardButton(
                text=f"–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞ {alt_platform_name}", 
                callback_data=f"direct_change_{alt_platform}"
            )
        )
        
        await callback_query.message.edit_text(
            f"‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ {platform_emoji} {platform_name} –ø–æ –∑–∞–ø—Ä–æ—Å—É: <b>{escape_html(query)}</b>\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∏—Å–∫–∞—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.",
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        return
    
    # Update state with new platform and tracks
    await state.update_data(
        platform=new_platform,
        tracks=tracks,
        current_page=0
    )
    
    # Show results
    await show_tracks_page(callback_query.message, state)

@router.callback_query(F.data == "change_platform")
async def change_platform(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    data = await state.get_data()
    query = data.get("query", "")
    
    # Show platform selection in the same message
    await callback_query.message.edit_text(
        f"üîç –ü–æ–∏—Å–∫: <b>{escape_html(query)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
        parse_mode="HTML",
        reply_markup=get_platform_selection_keyboard()
    )
    
    await state.set_state(SearchStates.select_platform)

@router.callback_query(F.data == "page_prev")
async def process_previous_page(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    
    if current_page > 0:
        await state.update_data(current_page=current_page - 1)
        
        await show_tracks_page(callback_query.message, state)

@router.callback_query(F.data == "page_next")
async def process_next_page(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    tracks = data.get("tracks", [])
    total_tracks = len(tracks)
    total_pages = (total_tracks + TRACKS_PER_PAGE - 1) // TRACKS_PER_PAGE
    
    if current_page < total_pages - 1:
        await state.update_data(current_page=current_page + 1)
        
        await show_tracks_page(callback_query.message, state)

@router.callback_query(F.data == "page_info")
async def process_page_info(callback_query: types.CallbackQuery):
    await callback_query.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

@router.callback_query(SearchStates.select_track, F.data.startswith("track_"))
async def process_track_selection(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    track_index = int(callback_query.data.split("_")[1])
    
    data = await state.get_data()
    tracks = data.get("tracks", [])
    platform = data.get("platform", "soundcloud")
    
    if track_index >= len(tracks):
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞: –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
        
    selected_track = tracks[track_index]
    
    user_info = selected_track.get('user', '')
    username = ''
    
    if isinstance(user_info, dict):
        username = user_info.get('username', 'Unknown')
    else:
        username = str(user_info)
    
    track_title = selected_track.get('title', 'Untitled')
    
    safe_username = escape_html(username)
    safe_title = escape_html(track_title)
    
    platform_emoji = "üü†" if platform == "soundcloud" else "üü¢"
    platform_name = "SoundCloud" if platform == "soundcloud" else "Spotify"
    
    logger.info(f"üéµ –í—ã–±—Ä–∞–Ω —Ç—Ä–µ–∫: {username} - {track_title} –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ {platform}")
    
    await callback_query.message.edit_text(
        f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç—Ä–µ–∫:\n"
        f"<b>{safe_username}</b> - {safe_title}",
        parse_mode="HTML"
    )
    
    track_url = selected_track.get("permalink_url")
    logger.info(f"üîó URL —Ç—Ä–µ–∫–∞: {track_url}")
    
    # Get download URL based on platform
    download_url = None
    track_data = None
    youtube_used = False
    
    if platform == "soundcloud":
        download_url, track_data = sc_client.get_track_download_url(track_url)
    elif platform == "spotify":
        # Try to get Spotify download URL first (for metadata)
        download_url, track_data = spotify_client.get_track_download_url(track_url)
        
        # Always use YouTube for Spotify tracks
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
        # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç—Ä–µ–∫"
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        youtube_url = youtube_client.search_on_youtube(
            f"{username} - {track_title}",  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            artist=username,                # –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ
            title=track_title               # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
        )
        
        if youtube_url:
            download_url = youtube_url
            youtube_used = True
            logger.info(f"YouTube URL –¥–ª—è Spotify —Ç—Ä–µ–∫–∞: {youtube_url}")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –Ω–∞ YouTube: {f"{username} - {track_title}"}")
            await callback_query.message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫ –Ω–∞ YouTube.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.",
                parse_mode="HTML"
            )
            return
    
    if not download_url:
        await callback_query.message.edit_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞.\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É.",
            parse_mode="HTML"
        )
        return
    
    # —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
    with tempfile.TemporaryDirectory() as temp_dir:
        temp_filename = None
        
        try:
            temp_filename = os.path.join(temp_dir, "audio.mp3")
            
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_filename}")
            
            merged_track_data = track_data or selected_track
            
            if track_data and selected_track:
                for key, value in selected_track.items():
                    if key not in track_data or not track_data.get(key):
                        merged_track_data[key] = value
                        
            logger.info(f"Merged track data available: {bool(merged_track_data)}")
            
            # Download track based on platform
            download_success = False
            processed_with_ffmpeg = False
            
            if platform == "soundcloud":
                download_success = sc_client.download_track(download_url, merged_track_data, temp_filename)
            elif platform == "spotify" and youtube_used:
                try:
                    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ Spotify
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Spotify API –¥–ª—è –∞–ª—å–±–æ–º–∞
                    album_name = ""
                    artwork_url = ""
                    release_year = ""
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∞–ª—å–±–æ–º–∞
                    album_data = merged_track_data.get('album', {})
                    if isinstance(album_data, dict):
                        album_name = album_data.get('name', '')
                        
                        # –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–æ–∂–∫—É –∞–ª—å–±–æ–º–∞
                        images = album_data.get('images', [])
                        if images and len(images) > 0 and isinstance(images[0], dict):
                            artwork_url = images[0].get('url', '')
                        
                        # –ü–æ–ª—É—á–∞–µ–º –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞
                        release_date = album_data.get('release_date', '')
                        if release_date and isinstance(release_date, str):
                            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≥–æ–¥ –∏–∑ –¥–∞—Ç—ã (–ø–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞)
                            release_year = release_date[:4] if len(release_date) >= 4 else ''
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
                    metadata = {
                        'title': track_title,
                        'artist': username,
                        'album': album_name,
                        'artwork_url': artwork_url,
                        'release_year': release_year,
                        'track_number': merged_track_data.get('track_number', ''),
                        'genre': '' # Spotify API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –∂–∞–Ω—Ä
                    }
                    
                    logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: –ù–∞–∑–≤–∞–Ω–∏–µ={metadata['title']}, –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å={metadata['artist']}, –ê–ª—å–±–æ–º={metadata['album']}")
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    temp_yt_file = os.path.join(temp_dir, "youtube_audio.mp3")
                    download_success = youtube_client.download_from_youtube(download_url, temp_yt_file, metadata)
                    
                    if download_success:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ ffmpeg –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
                        processed_with_ffmpeg = process_with_ffmpeg(temp_yt_file, temp_filename, metadata)
                        if processed_with_ffmpeg:
                            logger.info(f"‚úÖ –¢—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ FFmpeg")
                        else:
                            # –ï—Å–ª–∏ ffmpeg –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
                            shutil.copy(temp_yt_file, temp_filename)
                            logger.warning(f"‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ FFmpeg –Ω–µ —É–¥–∞–ª–∞—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: {e}")
                    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
                    simple_metadata = {
                        'title': track_title,
                        'artist': username
                    }
                    download_success = youtube_client.download_from_youtube(download_url, temp_filename, simple_metadata)
            elif platform == "spotify":
                download_success = spotify_client.download_track(download_url, merged_track_data, temp_filename)
            
            if not download_success:
                await callback_query.message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç—Ä–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç—Ä–µ–∫.",
                    parse_mode="HTML"
                )
                return
            
            user = merged_track_data.get("user", "") if merged_track_data else ""
            title = merged_track_data.get("title", "") if merged_track_data else ""
            
            if isinstance(user, dict):
                user = user.get("username", "")
            
            user = str(user).replace('<', '').replace('>', '').replace('&', '').replace('"', '').replace("'", "")
            title = str(title).replace('<', '').replace('>', '').replace('&', '').replace('"', '').replace("'", "")
            
            if user and title:
                clean_title = f"{user} - {title} @hxmusic_robot"
            else:
                clean_title = "music_track @hxmusic_robot"
            
            clean_title = "".join(c for c in clean_title if c.isalnum() or c in " -_.")
            logger.info(f"üìã –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –∏–º—è —Ñ–∞–π–ª–∞: {clean_title}.mp3")
            
            # Create caption with link to the bot (removed platform information)
            caption = "üëâ <a href='https://t.me/hxmusic_robot'>–ò—â–∏ —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏ –≤ –±–æ—Ç–µ</a> üëà"
            
            file_size = os.path.getsize(temp_filename)
            max_telegram_size = 50 * 1024 * 1024
            
            if file_size > max_telegram_size:
                await callback_query.message.edit_text(
                    f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram ({file_size / (1024 * 1024):.2f} –ú–ë).\n"
                    f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {max_telegram_size / (1024 * 1024):.2f} –ú–ë",
                    parse_mode="HTML"
                )
                return
            
            logger.info(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size / (1024 * 1024):.2f} –ú–ë")
            
            try:
                audio = FSInputFile(temp_filename, filename=f"{clean_title}.mp3")
                logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é...")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram
                media = InputMediaAudio(
                    media=audio,
                    caption=caption,
                    parse_mode="HTML",
                    title=title,
                    performer=user
                )
                
                try:
                    logger.debug(f"–ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ")
                    await callback_query.message.edit_media(media=media)
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å –∞—É–¥–∏–æ")
                except TelegramBadRequest as e:
                    error_msg = str(e).lower()
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Telegram –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {error_msg}")
                    
                    logger.info(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ")
                    
                    try:
                        await callback_query.message.delete()
                    except Exception:
                        pass
                    
                    await callback_query.message.answer_audio(
                        audio=audio,
                        caption=caption,
                        parse_mode="HTML",
                        title=title,
                        performer=user
                    )
                    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ")
                    
            except Exception as e:
                error_text = str(e).lower()
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                if "too large" in error_text or "entity too large" in error_text:
                    logger.error(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {error_text}")
                    try:
                        await callback_query.message.delete()
                    except Exception:
                        pass
                    
                    await callback_query.message.answer(
                        f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.\n"
                        f"–û—à–∏–±–∫–∞: {error_text}",
                        parse_mode="HTML"
                    )
                else:
                    logger.info(f"‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏")
                    
                    try:
                        await callback_query.message.answer_audio(
                            audio=audio,
                            caption=caption,
                            parse_mode="HTML",
                            title=title,
                            performer=user
                        )
                        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø–∞—Å–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞")
                    except Exception as e2:
                        logger.error(f"‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e2}")
                        await callback_query.message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e2}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞: {e}")
            await callback_query.message.edit_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞: {e}")
        
    # Temporary directory will be automatically cleaned up after this block

def process_with_ffmpeg(input_file, output_file, metadata):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ FFmpeg —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    try:
        if not os.path.exists(input_file):
            logger.error(f"–í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {input_file}")
            return False
            
        # –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã FFmpeg
        cmd = [
            "ffmpeg",
            "-i", input_file,
            "-codec:a", "libmp3lame",
            "-q:a", "0",       # –õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ MP3
            "-map_metadata", "0",  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if metadata:
            if metadata.get('title'):
                cmd.extend(["-metadata", f"title={metadata['title']}"])
            if metadata.get('artist'):
                cmd.extend(["-metadata", f"artist={metadata['artist']}"])
            if metadata.get('album'):
                cmd.extend(["-metadata", f"album={metadata['album']}"])
            if metadata.get('release_year'):
                cmd.extend(["-metadata", f"date={metadata['release_year']}"])
            if metadata.get('track_number'):
                cmd.extend(["-metadata", f"track={metadata['track_number']}"])
            if metadata.get('genre'):
                cmd.extend(["-metadata", f"genre={metadata['genre']}"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
        cmd.append(output_file)
        
        logger.info(f"–ó–∞–ø—É—Å–∫ FFmpeg: {' '.join(cmd)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º FFmpeg
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        stdout, stderr = process.communicate()
        
        if process.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ FFmpeg: {stderr}")
            return False
        
        return True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ FFmpeg: {e}")
        return False

@router.message()
async def handle_text_message(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state == SearchStates.waiting_for_query.state:
        await process_search_query(message, state)
    else:
        query = message.text.strip()
        if query:
            # Show search message with platform options in the same message
            search_msg = await message.answer(f"üîç –ü–æ–∏—Å–∫: <b>{escape_html(query)}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", 
                                            parse_mode="HTML",
                                            reply_markup=get_platform_selection_keyboard())
            
            # Store data for future use
            await state.update_data(
                query=query,
                search_message_id=search_msg.message_id
            )
            await state.set_state(SearchStates.select_platform)